入门操作：
   rustc main.rs
   main.exe

进阶操作：
   使用Cargo创建项目：
   cargo new hello_cargo
   - 项目的名字也是 hello_cargo
   - 会创建一个新的目录 hello_cargo
   - Cargo.toml
   - src 目录
      - main.rs

[Cargo.toml]
   - toml(Tom's Obvious,Minimal Language) 格式，是 Cargo 的配置格式

[pacakge]
   - 是一个区域标题，表示下方内容是用来配置包[package]的
   - name 项目名
   - version 项目版本
   - authors 项目作者
   - edition 使用的rust版本

[dependencies]
   - 另一个区域的开始，它会列出项目的依赖项

[注] 在 Rust 里面，代码的包称作 crate

[常用指令]
   - cargo build
   - cargo bulid --release 为发布构建 代码运行更快，编译时间较长
   - cargo run 编译+运行
   - cargo check 检查代码，确保能通过编译，不产生二进制文件
   - cargo update 更新依赖项
   - rustup doc 本地文档
   - cargo doc --open 本地依赖项 crate 文档

[变量与可变性]
   - 声明变量使用 let 关键字
   - 默认情况下，变量是不可变的(Immutable)
   - 在变量前面加上 mut 关键字 就可变为可变变量

[变量与常量]
   -- 常量(constant)，常量在绑定值以后也是不可变的，但是它与不可变的变量有很多区别
   - 不可以使用 mut，常量永远都是不可变的
   - 声明变量使用 const 关键字，他的类型必须被标注
   - 常量可以在任何作用域内进行声明，包括全局作用域
   - 常量只可以绑定到常量表达式，无法绑定到函数的调用结果或只能在运行时才能计算出的值
   -- 在程序运行期间，常量在其声明的作用域内一直有效
   -- 命名规范： Rust 里常量使用全大写字母，每个单词之间用下划线分开，例如：
   - MAX_POINTS
   -- const MAX_POINTS:u32 = 100_000;

[Shadowing]隐藏
   -- 可以使用相同名字声明新的变量，新的变量就会 shadow 之前声明的同名变量
   - 在后续的代码中这个变量名代表的就是新的变量
   -- shadow 和把变量标记为 mut 是不一样的：
   - 如果不使用 let 关键字，那么重新给非 mut 的变量赋值会导致编译错误
   - 而使用 let 声明的同名新变量，也是不可变的
   - 使用 let 声明的同名新变量，他的类型可以与之前不同